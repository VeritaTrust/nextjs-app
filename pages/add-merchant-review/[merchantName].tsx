import {GetServerSideProps, NextPage} from 'next';
import Head from 'next/head';
import {useTranslation} from 'next-i18next';
import {useState} from 'react';
import {PrismaClient} from '@prisma/client';
import {MerchantProfileDto} from '@server/dto/MerchantProfileDto';
import {MerchantProfileMapper} from '@server/mappers';
import Image from 'next/image';
import Link from 'next/link';
import {Field, Formik, FormikHelpers} from 'formik';
import axios from 'axios';
import {AddMerchantReviewDto} from '@server/dto/request/AddMerchantReviewDto';
import {useRouter} from 'next/navigation';
import {serverSideTranslations} from 'next-i18next/serverSideTranslations';
import Stars from "../../components/stars";
import {DEFAULT_RATING_STAR, getNoteByTextLength, RATING_STAR_TEXTS} from "../../helpers/const";

interface Props {
  merchantProfile: MerchantProfileDto;
}

const AddMerchantReview: NextPage<Props> = ({merchantProfile}: Props) => {
  const router = useRouter();
  const {t: translate} = useTranslation('about');
  console.log('TR', translate('about_us_text'));

  const [rating, setRating] = useState<number>(DEFAULT_RATING_STAR)
  const [content, setContent] = useState("")

  return (
    <>
      <Head>
        <meta name="description" content="Generated by create next app"/>
        <title>Veritatrust - Merchant Review</title>
      </Head>
      <main>
        {/* TODO: for validation use YUP */}
        <Formik
          initialValues={{title: '', content: ''}}
          onSubmit={(values, {setSubmitting}: FormikHelpers<FormValues>) => {
            setTimeout(() => {
              axios
                .post<AddMerchantReviewDto>(
                  `${process.env.NEXT_PUBLIC_API_URL}/api/merchants/${merchantProfile.id}/reviews`,
                  values
                )
                .then(() => router.push('/valid-review'))
                // TODO: navigate valid review
                .catch(console.log)
                .finally(() => setSubmitting(false));
            }, 2000);
          }}
        >
          {({
              values,
              errors,
              touched,
              handleChange,
              handleBlur,
              handleSubmit,
              isSubmitting,
              /* and other goodies */
            }) => (
            <form
              className="row d-flex align-items-center"
              id="review_form"
              onSubmit={handleSubmit}
            >
              <div className="container">
                <div className="row d-flex align-items-center">
                  <div className="col-11 col-lg-8 pt-3 mx-auto text-center">
                    <h3>
                      Rate your experience
                      <Link
                        href={merchantProfile.website}
                        target="_blank"
                        rel="noopener noreferrer"
                      >
                        {merchantProfile.name}
                      </Link>
                    </h3>
                    <p>Share your opinion and get reward!</p>
                  </div>
                  <div className="col-11 col-lg-8 py-3 mx-auto position-relative">
                    <ul className="step-reviews nav text-center">
                      <li className="nav-item w-33 step-1 active ">
                        <span className="badge rounded-circle">1</span>
                        <p className="mb-0">
                          Your merchant <br/>
                          review
                        </p>
                      </li>
                      <li className="nav-item w-33 step-2 ">
                        <span className="badge rounded-circle">2</span>
                        <p className="mb-0" aria-current="page">
                          Your product <br/>
                          review
                        </p>
                      </li>
                      <li className="nav-item w-33 step-3 ">
                        <span className="badge rounded-circle">3</span>
                        <p className="mb-0">
                          Validated
                          <br/>
                          reviews
                        </p>
                      </li>
                    </ul>
                    <div id="line">
                      <div id="line-progress"></div>
                    </div>
                  </div>
                  <div className="col-11 col-lg-8 py-4 px-lg-4 mx-auto bg-light rounded-5">
                    <div className="form__header">
                      <div className="row d-flex align-items-center">
                        <div
                          className="col-8 col-md-4 col-xl-3 d-flex rounded-4 border bg-white visuel-mark logo mx-auto">
                          <Image
                            src={merchantProfile.logo}
                            alt="Merchant name"
                            width={100}
                            height={100}
                          />
                        </div>
                        <div className="col-12 col-md-8 col-xl-9">
                          <div className="form__header__note">
                            <p className="lead">Rate your experience</p>
                            <Stars rating={rating} setRating={(num: number) => setRating(num)}/>
                            <p>
                            <span id="review-value">
                            {rating}
                          </span>
                              {' '}
                              <span
                                id="review-value-text"
                              >
                                {' '}
                                <strong> stars: </strong>
                                {RATING_STAR_TEXTS[rating - 1]}
                              </span>
                            </p>
                          </div>
                        </div>
                      </div>
                    </div>
                    <hr/>
                    <div className="form__content">
                      <p className="lead mt-3 mb-0">Write your title</p>
                      <input
                        className="form-control"
                        id="title"
                        required={false}
                        type="title"
                        name="title"
                        onChange={handleChange}
                        onBlur={handleBlur}
                        value={values.title}
                      />
                      {errors.title && touched.title}

                      <p className="lead mb-0">Write your review</p>
                      <p id="note_review" className="">
                        Your review content:{' '}
                        <span id="noteReview" style={{marginLeft: '10px'}}
                              className={`${getNoteByTextLength(content.length).className}`}>{getNoteByTextLength(content.length).title}</span>
                      </p>

                      <Field
                        required={false}
                        onChange={(e: any) => {
                          setContent(e.target.value);
                          handleChange(e)
                        }}
                        onBlur={handleBlur}
                        value={values.content}
                        placeholder="Write your review here. Talk about your experience without using offensive language. Leave an honest, useful and constructive testimonial."
                        id="content"
                        name="content"
                        rows={10}
                        className="form-control"
                        component={'textarea'}
                      />
                      {errors.content && touched.content}

                      <p className="lead mt-3 mb-0">Experience date</p>
                      <input
                        className="form-control"
                        type="date"
                        max="2023-02-02"
                        data-date-inline-picker="true"
                        name="experienceDate"
                        id="date"
                        required={false}
                        onChange={handleChange}
                      />
                      {/*ref={experienceDate} ABOVE
                             value={reviewObj.experienceDate?.toString()}*/}
                    </div>
                    <div className="form__footer">
                      <span id="error"></span>
                      <div className="d-grid gap-2">
                        <button
                          disabled={isSubmitting}
                          type="submit"
                          className="btn-block btn btn-primary btn-lg text-uppercase text-right"
                          id="btn"
                        >
                          {isSubmitting ? (
                            <>
                              <span
                                className="spinner-grow spinner-grow-sm"
                                role="status"
                                aria-hidden="true"
                              ></span>
                              Submitting...
                            </>
                          ) : (
                            `Publish`
                          )}
                        </button>
                      </div>
                    </div>
                  </div>
                </div>
              </div>
            </form>
          )}
        </Formik>
      </main>
    </>
  );
};

export const getServerSideProps: GetServerSideProps<Props> = async (
  context
) => {
  try {
    const merchantName = context.params?.merchantName as string;

    if (!merchantName) {
      throw Error('NO PROFILE FOUND TO WRITE REVIEW');
    }

    const profile = await new PrismaClient().merchantProfile.findUniqueOrThrow({
      where: {
        name: merchantName,
      },
    });

    return {
      props: {
        ...(await serverSideTranslations(context.locale as string, ['about'])),
        textAreaId: 1,
        merchantProfile: MerchantProfileMapper.toDto(profile),
      },
    };
  } catch (error) {
    console.log(error);
    return {
      notFound: true,
    };
  }
};

interface FormValues {
  title: string;
  content: string;
}

export default AddMerchantReview;
